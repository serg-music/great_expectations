{
    "title": "HDFAsset",
    "description": "Read from the store, close it if we opened it.\n\nRetrieve pandas object stored in file, optionally based on where\ncriteria.\n\n.. warning::\n\n   Pandas uses PyTables for reading and writing HDF5 files, which allows\n   serializing object-dtype data with pickle when using the \"fixed\" format.\n   Loading pickled data received from untrusted sources can be unsafe.\n\n   See: https://docs.python.org/3/library/pickle.html for more.\n\nParameters\n----------\npath_or_buf : str, path object, pandas.HDFStore\n    Any valid string path is acceptable. Only supports the local file system,\n    remote URLs and file-like objects are not supported.\n\n    If you want to pass in a path object, pandas accepts any\n    ``os.PathLike``.\n\n    Alternatively, pandas accepts an open :class:`pandas.HDFStore` object.\n\nkey : object, optional\n    The group identifier in the store. Can be omitted if the HDF file\n    contains a single pandas object.\nmode : {'r', 'r+', 'a'}, default 'r'\n    Mode to use when opening the file. Ignored if path_or_buf is a\n    :class:`pandas.HDFStore`. Default is 'r'.\nerrors : str, default 'strict'\n    Specifies how encoding and decoding errors are to be handled.\n    See the errors argument for :func:`open` for a full list\n    of options.\nwhere : list, optional\n    A list of Term (or convertible) objects.\nstart : int, optional\n    Row number to start selection.\nstop  : int, optional\n    Row number to stop selection.\ncolumns : list, optional\n    A list of columns names to return.\niterator : bool, optional\n    Return an iterator object.\nchunksize : int, optional\n    Number of rows to include in an iteration when using an iterator.\n**kwargs\n    Additional keyword arguments passed to HDFStore.\n\nReturns\n-------\nitem : object\n    The selected object. Return type depends on the object stored.\n\nSee Also\n--------\nDataFrame.to_hdf : Write a HDF file from a DataFrame.\nHDFStore : Low-level access to HDF files.\n\nExamples\n--------\n>>> df = pd.DataFrame([[1, 1.0, 'a']], columns=['x', 'y', 'z'])\n>>> df.to_hdf('./store.h5', 'data')\n>>> reread = pd.read_hdf('./store.h5')",
    "type": "object",
    "properties": {
        "name": {
            "title": "Name",
            "type": "string"
        },
        "type": {
            "title": "Type",
            "default": "hdf",
            "enum": [
                "hdf"
            ],
            "type": "string"
        },
        "order_by": {
            "title": "Order By",
            "type": "array",
            "items": {
                "$ref": "#/definitions/BatchSorter"
            }
        },
        "path_or_buf": {
            "title": "Path Or Buf"
        },
        "key": {
            "title": "Key"
        },
        "mode": {
            "title": "Mode",
            "default": "r",
            "type": "string"
        },
        "errors": {
            "title": "Errors",
            "default": "strict",
            "type": "string"
        },
        "where": {
            "title": "Where"
        },
        "start": {
            "title": "Start",
            "type": "integer"
        },
        "stop": {
            "title": "Stop",
            "type": "integer"
        },
        "columns": {
            "title": "Columns"
        },
        "iterator": {
            "title": "Iterator",
            "default": false
        },
        "chunksize": {
            "title": "Chunksize",
            "type": "integer"
        },
        "kwargs": {
            "title": "Kwargs",
            "description": "Extra keyword arguments that will be passed to the reader method",
            "type": "object"
        }
    },
    "required": [
        "name",
        "path_or_buf"
    ],
    "additionalProperties": false,
    "definitions": {
        "BatchSorter": {
            "title": "BatchSorter",
            "type": "object",
            "properties": {
                "key": {
                    "title": "Key",
                    "type": "string"
                },
                "reverse": {
                    "title": "Reverse",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": [
                "key"
            ]
        }
    }
}
