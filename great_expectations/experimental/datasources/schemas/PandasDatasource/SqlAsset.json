{
    "title": "SqlAsset",
    "description": "Read SQL query or database table into a DataFrame.\n\nThis function is a convenience wrapper around ``read_sql_table`` and\n``read_sql_query`` (for backward compatibility). It will delegate\nto the specific function depending on the provided input. A SQL query\nwill be routed to ``read_sql_query``, while a database table name will\nbe routed to ``read_sql_table``. Note that the delegated function might\nhave more specific notes about their functionality not listed here.\n\nParameters\n----------\nsql : str or SQLAlchemy Selectable (select or text object)\n    SQL query to be executed or a table name.\ncon : SQLAlchemy connectable, str, or sqlite3 connection\n    Using SQLAlchemy makes it possible to use any DB supported by that\n    library. If a DBAPI2 object, only sqlite3 is supported. The user is responsible\n    for engine disposal and connection closure for the SQLAlchemy connectable; str\n    connections are closed automatically. See\n    `here <https://docs.sqlalchemy.org/en/13/core/connections.html>`_.\nindex_col : str or list of str, optional, default: None\n    Column(s) to set as index(MultiIndex).\ncoerce_float : bool, default True\n    Attempts to convert values of non-string, non-numeric objects (like\n    decimal.Decimal) to floating point, useful for SQL result sets.\nparams : list, tuple or dict, optional, default: None\n    List of parameters to pass to execute method.  The syntax used\n    to pass parameters is database driver dependent. Check your\n    database driver documentation for which of the five syntax styles,\n    described in PEP 249's paramstyle, is supported.\n    Eg. for psycopg2, uses %(name)s so use params={'name' : 'value'}.\nparse_dates : list or dict, default: None\n    - List of column names to parse as dates.\n    - Dict of ``{column_name: format string}`` where format string is\n      strftime compatible in case of parsing string times, or is one of\n      (D, s, ns, ms, us) in case of parsing integer timestamps.\n    - Dict of ``{column_name: arg dict}``, where the arg dict corresponds\n      to the keyword arguments of :func:`pandas.to_datetime`\n      Especially useful with databases without native Datetime support,\n      such as SQLite.\ncolumns : list, default: None\n    List of column names to select from SQL table (only used when reading\n    a table).\nchunksize : int, default None\n    If specified, return an iterator where `chunksize` is the\n    number of rows to include in each chunk.\n\nReturns\n-------\nDataFrame or Iterator[DataFrame]\n\nSee Also\n--------\nread_sql_table : Read SQL database table into a DataFrame.\nread_sql_query : Read SQL query into a DataFrame.\n\nExamples\n--------\nRead data from SQL via either a SQL query or a SQL tablename.\nWhen using a SQLite database only SQL queries are accepted,\nproviding only the SQL tablename will result in an error.\n\n>>> from sqlite3 import connect\n>>> conn = connect(':memory:')\n>>> df = pd.DataFrame(data=[[0, '10/11/12'], [1, '12/11/10']],\n...                   columns=['int_column', 'date_column'])\n>>> df.to_sql('test_data', conn)\n\n>>> pd.read_sql('SELECT int_column, date_column FROM test_data', conn)\n   int_column date_column\n0           0    10/11/12\n1           1    12/11/10\n\n>>> pd.read_sql('test_data', 'postgres:///db_name')  # doctest:+SKIP\n\nApply date parsing to columns through the ``parse_dates`` argument\n\n>>> pd.read_sql('SELECT int_column, date_column FROM test_data',\n...             conn,\n...             parse_dates=[\"date_column\"])\n   int_column date_column\n0           0  2012-10-11\n1           1  2010-12-11\n\nThe ``parse_dates`` argument calls ``pd.to_datetime`` on the provided columns.\nCustom argument values for applying ``pd.to_datetime`` on a column are specified\nvia a dictionary format:\n1. Ignore errors while parsing the values of \"date_column\"\n\n>>> pd.read_sql('SELECT int_column, date_column FROM test_data',\n...             conn,\n...             parse_dates={\"date_column\": {\"errors\": \"ignore\"}})\n   int_column date_column\n0           0  2012-10-11\n1           1  2010-12-11\n\n2. Apply a dayfirst date parsing order on the values of \"date_column\"\n\n>>> pd.read_sql('SELECT int_column, date_column FROM test_data',\n...             conn,\n...             parse_dates={\"date_column\": {\"dayfirst\": True}})\n   int_column date_column\n0           0  2012-11-10\n1           1  2010-11-12\n\n3. Apply custom formatting when date parsing the values of \"date_column\"\n\n>>> pd.read_sql('SELECT int_column, date_column FROM test_data',\n...             conn,\n...             parse_dates={\"date_column\": {\"format\": \"%d/%m/%y\"}})\n   int_column date_column\n0           0  2012-11-10\n1           1  2010-11-12",
    "type": "object",
    "properties": {
        "name": {
            "title": "Name",
            "type": "string"
        },
        "type": {
            "title": "Type",
            "default": "sql",
            "enum": [
                "sql"
            ],
            "type": "string"
        },
        "order_by": {
            "title": "Order By",
            "type": "array",
            "items": {
                "$ref": "#/definitions/BatchSorter"
            }
        },
        "sql": {
            "title": "Sql"
        },
        "con": {
            "title": "Con"
        },
        "index_col": {
            "title": "Index Col",
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        },
        "coerce_float": {
            "title": "Coerce Float",
            "default": true,
            "type": "boolean"
        },
        "params": {
            "title": "Params"
        },
        "parse_dates": {
            "title": "Parse Dates"
        },
        "columns": {
            "title": "Columns"
        },
        "chunksize": {
            "title": "Chunksize",
            "type": "integer"
        }
    },
    "required": [
        "name",
        "sql",
        "con"
    ],
    "additionalProperties": false,
    "definitions": {
        "BatchSorter": {
            "title": "BatchSorter",
            "type": "object",
            "properties": {
                "key": {
                    "title": "Key",
                    "type": "string"
                },
                "reverse": {
                    "title": "Reverse",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": [
                "key"
            ]
        }
    }
}
