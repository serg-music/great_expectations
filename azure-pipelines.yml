# This file is responsible for configuring the `great_expectations` pipeline (https://dev.azure.com/great-expectations/great_expectations/_build)
#
# The pipeline is run under the following conditions:
#   - On the main branch when a weekly release is being cut
#   - On the develop branch as scheduled by the below cron job
#
#  `great_expectations` runs the entire test suite and is meant to safeguard the codebase against any errors that may have slipped through the cracks
#  from `dependency_graph`. Additionally, it is responsible for deployment during the weekly release cut.

schedules:
- cron: 0 */3 * * *
  displayName: Scheduled Runs
  branches:
    include:
    - develop
    exclude:
    - main
  always: false # Will only trigger if the state of the codebase has changed sinced the last scheduled run

trigger:
  branches:
    include:
    - pre_pr-* # Can be used to test both `great_expectations` and `dependency_graph` pipelines
    - main
    exclude:
    - develop

resources:
  containers:
  - container: postgres
    image: postgres:11
    ports:
    - 5432:5432
    env:
      POSTGRES_DB: "test_ci"
      POSTGRES_HOST_AUTH_METHOD: "trust"
  - container: mysql
    image: mysql:8.0.20
    ports:
      - 3306:3306
    env:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: test_ci
  - container: mssql
    image: mcr.microsoft.com/mssql/server:2019-latest
    env:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: ReallyStrongPwd1234%^&*
      MSSQL_DB: test_ci
      MSSQL_PID: Developer
    ports:
      - 1433:1433
  - container: trino
    image: trinodb/trino:379
    ports:
      - 8088:8080

# The pipeline is run under two primary conditions: if merging into main or as scheduled by the above cron job.
variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isScheduled: $[and(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.Reason'], 'Schedule'))]
  isManual: $[eq(variables['Build.Reason'], 'Manual')]
  GE_USAGE_STATISTICS_URL: "https://qa.stats.greatexpectations.io/great_expectations/v1/usage_statistics"

stages:
  - stage: lint
    pool:
      vmImage: 'ubuntu-latest'

    jobs:
      - job: lint
        condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: 3.7
            displayName: 'Use Python 3.7'

          - script: |
              pip install isort[requirements]==5.4.2 flake8==3.8.3 black==22.3.0 pyupgrade==2.7.2
              EXIT_STATUS=0
              isort . --check-only --skip docs/ || EXIT_STATUS=$?
              black --check --exclude docs/ . || EXIT_STATUS=$?
              flake8 great_expectations/core || EXIT_STATUS=$?
              pyupgrade --py3-plus || EXIT_STATUS=$?
              exit $EXIT_STATUS

  - stage: custom_checks
    pool:
      vmImage: 'ubuntu-latest'

    jobs:
    - job: type_hint_checker
      condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))
      steps:
      - script: |
          pip install mypy # Prereq for type hint script
          python scripts/check_type_hint_coverage.py
        name: TypeHintChecker

    - job: docstring_checker
      condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))
      steps:
      - bash: python scripts/check_docstring_coverage.py
        name: DocstringChecker

    - job: unused_import_checker
      condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))
      steps:
      - script: |
          pip install flake8
          # https://www.flake8rules.com/rules/F401.html - Prunes the dgtest graph to improve accuracy
          flake8 --select F401 great_expectations tests
        name: UnusedImportChecker

  - stage: import_ge
    dependsOn: [lint]
    pool:
      vmImage: 'ubuntu-18.04'
    jobs:
      - job: import_ge
        condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))

        strategy:
         matrix:
           Python37:
             python.version: '3.7'
           Python38:
             python.version: '3.8'
           Python39:
             python.version: '3.9'


        steps:
         - task: UsePythonVersion@0
           inputs:
             versionSpec: '$(python.version)'
           displayName: 'Use Python $(python.version)'

         - bash: python -m pip install --upgrade pip==21.3.1
           displayName: 'Update pip'

         - script: |
             pip install  .
           displayName: 'Install GE and required dependencies (i.e. not sqlalchemy)'

         - script: |
             python -c "import great_expectations as ge; print('Successfully imported GE Version:', ge.__version__)"
           displayName: 'Import Great Expectations'

  - stage: required
    dependsOn: [lint, import_ge, custom_checks]
    pool:
      vmImage: 'ubuntu-18.04'

    jobs:
      - job: compatibility_matrix
        condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))
        timeoutInMinutes: 75
        variables:
          GE_pytest_opts: '--no-sqlalchemy'
        strategy:
          matrix:
            Python37-Pandas023:
              python.version: '3.7'
              numpy.version: '1.17.0'
              pandas.version: '0.23.4'
              scipy.version: 'latest'
              GE_pytest_pip_opts: '--requirement requirements-dev-test.txt --constraint constraints-dev.txt'
            Python37-Pandas025:
              python.version: '3.7'
              numpy.version: '1.17.0'
              pandas.version: '0.25.3'
              # numpy 1.20 and pandas 0.25.3 do not coexist happily
              scipy.version: 'latest'
              GE_pytest_pip_opts: '--requirement requirements-dev-test.txt --constraint constraints-dev.txt'
            Python38-PandasLatest:
              python.version: '3.8'
              numpy.version: 'latest'
              pandas.version: 'latest'
              scipy.version: 'latest'
              GE_pytest_pip_opts: '--requirement requirements-dev-test.txt --constraint constraints-dev.txt'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==21.3.1
            displayName: 'Update pip'

          - script: |
              if [[ $(numpy.version) == 'latest' ]]; then
                pip install numpy
              else
                pip install numpy==$(numpy.version)
              fi
            displayName: 'Install numpy'

          - script: |
              if [[ $(pandas.version) == 'latest' ]]; then
                pip install pandas
              else
                pip install pandas==$(pandas.version)
              fi
            displayName: 'Install pandas'

          - script: |
              if [[ $(scipy.version) == 'latest' ]]; then
                pip install scipy
              else
                pip install scipy==$(scipy.version)
              fi
            displayName: 'Install scipy'

          - script: |
              pip install $(GE_pytest_pip_opts)
              pip install  --requirement requirements.txt
              # Consider fragmenting *all* integration tests into separate folder and run
              pip install  .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest pytest-cov pytest-azurepipelines
              pytest $(GE_pytest_opts) --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --ignore=tests/cli --ignore=tests/integration/usage_statistics
            displayName: 'pytest'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/test-*.xml'
              testRunTitle: 'Publish test results for Python $(python.version)'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

      - job: comprehensive
        condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))
        timeoutInMinutes: 75

        services:
          postgres: postgres

        variables:
          GE_pytest_opts: '--postgresql --spark'

        strategy:
          matrix:
            Python37:
              python.version: '3.7'
              pandas.version: 'latest'
              GE_pytest_pip_opts: '"pyspark<3.0.0" --requirement requirements-dev.txt --constraint constraints-dev.txt'
            Python38:
              python.version: '3.8'
              pandas.version: 'latest'
              GE_pytest_pip_opts: '--requirement requirements-dev.txt --constraint constraints-dev.txt'
            Python39:
              python.version: '3.9'
              pandas.version: 'latest'
              GE_pytest_pip_opts: '--requirement requirements-dev.txt --constraint constraints-dev.txt'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==21.3.1
            displayName: 'Update pip'

          - script: |
              if [[ $(pandas.version) == 'latest' ]]; then
                pip install pandas
              else
                pip install pandas==$(pandas.version)
              fi
            displayName: 'Install pandas'

          - script: |
              pip install --requirement requirements.txt
              echo "about to run pip install $(GE_pytest_pip_opts)"
              pip install $(GE_pytest_pip_opts)
              pip install  .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest pytest-cov pytest-azurepipelines
              pytest $(GE_pytest_opts) --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --ignore=tests/cli --ignore=tests/integration/usage_statistics
            displayName: 'pytest'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/test-*.xml'
              testRunTitle: 'Publish test results for Python $(python.version)'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

  - stage: usage_stats_integration
    dependsOn: [lint, import_ge, custom_checks]
    pool:
      vmImage: 'ubuntu-latest'

    jobs:
      - job: test_usage_stats_messages
        condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))
        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==20.2.4
            displayName: 'Update pip'

          - script: |
              pip install --requirement requirements-dev-test.txt
              pip install --requirement requirements.txt
              pip install .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest pytest-azurepipelines
              pytest --no-sqlalchemy --aws-integration -v tests/integration/usage_statistics
            displayName: 'pytest'

  - stage: db_integration
    pool:
      vmImage: 'ubuntu-latest'

    dependsOn: [lint, import_ge, custom_checks]

    jobs:
      - job: mysql
        condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))

        services:
          mysql: mysql

        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==21.3.1
            displayName: 'Update pip'

          - script: |
              printf 'Waiting for MySQL database to accept connections'
              until mysql --host=localhost --protocol=TCP --port=3306 --user=root --password='' --execute "SHOW DATABASES"; do
                printf '.'
                sleep 1;
              done;
            displayName: Wait for database to initialise

          - script: |
              echo "SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));" > mysql_setup_script.sql
              mysql --host=localhost --protocol=TCP --port=3306 --user=root --password='' --reconnect < mysql_setup_script.sql
            displayName: 'Configure mysql'

          - script: |
              pip install --requirement requirements-dev-test.txt --requirement requirements-dev-sqlalchemy.txt --constraint constraints-dev.txt
              pip install --requirement requirements.txt
              pip install .
            displayName: 'Install dependencies'

          - script: |
              pip install --requirement requirements.txt
              pip install pytest pytest-cov pytest-azurepipelines
              pytest --mysql --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --ignore=tests/cli --ignore=tests/integration/usage_statistics
            displayName: 'pytest'

      - job: mssql
        condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))

        services:
          mssql: mssql

        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==21.3.1
            displayName: 'Update pip'

          - script: |
              sqlcmd -U sa -P "ReallyStrongPwd1234%^&*" -Q "CREATE DATABASE test_ci;" -o create_db_output.txt

          - script: |
              pip install --requirement requirements-dev-test.txt --requirement requirements-dev-sqlalchemy.txt --constraint constraints-dev.txt
              pip install --requirement requirements.txt
              pip install .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest pytest-cov pytest-azurepipelines
              pytest --mssql --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --ignore=tests/cli --ignore=tests/integration/usage_statistics
            displayName: 'pytest'

      - job: trino
        condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))

        services:
          trino: trino

        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==21.3.1
            displayName: 'Update pip'

          - script: |
              printf 'Waiting for Trino database to accept connections'
              sleep 30
#             until trino --execute "SHOW CATALOGS"; do
#               printf '.'
#               sleep 1;
#             done;
            displayName: Wait for database to initialise

          - script: |
              pip install --requirement requirements-dev-test.txt --requirement requirements-dev-sqlalchemy.txt --constraint constraints-dev.txt
              pip install --requirement requirements.txt
              pip install .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest pytest-cov pytest-azurepipelines
              pytest --trino --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --ignore=tests/cli --ignore=tests/integration/usage_statistics
            displayName: 'pytest'

  - stage: cli_integration
    dependsOn: [lint, import_ge, custom_checks]
    pool:
      vmImage: 'ubuntu-latest'

    jobs:
      - job: test_cli
        condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true), eq(variables.isManual, true))

        services:
          postgres: postgres

        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==21.3.1
            displayName: 'Update pip'

          - script: |
              pip install --requirement requirements-dev-test.txt --requirement requirements-dev-spark.txt --requirement requirements-dev-sqlalchemy.txt --constraint constraints-dev.txt
              pip install --requirement requirements.txt
              pip install .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest
              pytest --postgresql --spark --aws-integration -v tests/cli
            displayName: 'pytest'

  - stage: deploy_gallery
    condition: and(succeeded(), eq(variables.isMain, true))
    pool:
      vmImage: 'ubuntu-18.04'
    dependsOn: [import_ge, custom_checks, required, lint, db_integration, usage_stats_integration, cli_integration]

    jobs:
      - job: build_gallery
        variables:
          python.version: '3.7'
          GE_pytest_pip_opts: '"pyspark<3.0.0" "cookiecutter==1.7.3" "google-cloud-bigquery-storage" --requirement requirements-dev.txt --constraint constraints-dev.txt'
          GE_pytest_opts: ''

        services:
          postgres: postgres
          mysql: mysql
          mssql: mssql
          trino: trino

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==21.3.1
            displayName: 'Update pip'

          - script: |
              pip install $(GE_pytest_pip_opts)
              pip install --requirement requirements.txt
              pip install  --editable .
            displayName: 'Install dependencies'

          - script: |
              printf 'Waiting for MySQL database to accept connections'
              until mysql --host=localhost --protocol=TCP --port=3306 --user=root --password='' --execute "SHOW DATABASES"; do
                printf '.'
                sleep 1;
              done;
            displayName: 'Wait for MySQL database to initialise'

          - script: |
              echo "SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));" > mysql_setup_script.sql
              mysql --host=localhost --protocol=TCP --port=3306 --user=root --password='' --reconnect < mysql_setup_script.sql
            displayName: 'Configure mysql'

          - script: |
              sqlcmd -U sa -P "ReallyStrongPwd1234%^&*" -Q "CREATE DATABASE test_ci;" -o create_db_output.txt
            displayName: 'Configure mssql'

          - script: |
              printf 'Waiting for Trino database to accept connections'
              sleep 30
#             until trino --execute "SHOW CATALOGS"; do
#               printf '.'
#               sleep 1;
#             done;
            displayName: 'Wait for Trino database to initialise'

#         - task: DownloadSecureFile@1
#           name: gcp_authkey
#           displayName: 'Download Google Service Account'
#           inputs:
#             secureFile: 'superconductive-service-acct_ge-oss-ci-cd.json'
#             retryCount: '2'

          - bash: python ./build_gallery.py
            workingDirectory: $(Build.SourcesDirectory)/assets/scripts/
            displayName: 'Build Gallery'
#           env:
#             GOOGLE_APPLICATION_CREDENTIALS: $(gcp_authkey.secureFilePath)
#             GE_TEST_GCP_PROJECT: $(GE_TEST_GCP_PROJECT)
#             GE_TEST_BIGQUERY_DATASET: $(GE_TEST_BIGQUERY_DATASET)
#             GE_TEST_BIGQUERY_PERFORMANCE_DATASET: $(GE_TEST_BIGQUERY_PERFORMANCE_DATASET)

          - bash: python ./build_package_gallery.py
            workingDirectory: $(Build.SourcesDirectory)/assets/scripts/
            displayName: 'Build Package Gallery'

          - task: S3Upload@1
            inputs:
              regionName: 'us-east-2'
              awsCredentials: 'aws-ci-great-expectations'
              bucketName: 'superconductive-public'
              sourceFolder: '$(Build.SourcesDirectory)/assets/scripts'
              globExpressions: '*.json'
              targetFolder: 'static/gallery/'
              filesAcl: 'public-read'

          - bash: |
              echo "About to trigger webhook: $GALLERY_BUILD_HOOK"
              curl -X POST -d {} $GALLERY_BUILD_HOOK
            displayName: 'Trigger gallery build'
            env:
              GALLERY_BUILD_HOOK: $(gallerywebhook)

  - stage: deploy
    condition: and(succeeded(), eq(variables.isMain, true))
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: [import_ge, custom_checks, required, lint, db_integration, usage_stats_integration, cli_integration]

    jobs:
      - job: deploy
        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip==21.3.1
            displayName: 'Update pip'

          - script: |
              pip install twine
              pip install wheel
              echo "Creating tag: $(cat ./great_expectations/deployment_version)"
              git config --global user.email "team@greatexpectations.io"
              git config --global user.name "Great Expectations"
              git tag --annotate $(cat ./great_expectations/deployment_version) -m "$(cat ./great_expectations/deployment_version)" || echo "tag exists, skipping"
            displayName: 'Add new version tag'

          # Build the python distribution from source
          - script: |
              python setup.py sdist
              python setup.py bdist_wheel
            displayName: 'Build distribution'

          - task: TwineAuthenticate@1
            inputs:
              pythonUploadServiceConnection: pypi

          # Use command line script to 'twine upload', use -r to pass the repository name and --config-file to pass the environment variable set by the authenticate task.
          - script: |
              python -m twine upload -r great-expectations --config-file $(PYPIRC_PATH) dist/*
            displayName: 'Upload'
